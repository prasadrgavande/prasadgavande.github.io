<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://prasadgavande.in/feed.xml" rel="self" type="application/atom+xml"/><link href="https://prasadgavande.in/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-11T04:13:17+00:00</updated><id>https://prasadgavande.in/feed.xml</id><title type="html">blank</title><subtitle>Personal website | Technical blog</subtitle><entry><title type="html">Boilerplate project to debug and run C++ code in VS Code</title><link href="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/" rel="alternate" type="text/html" title="Boilerplate project to debug and run C++ code in VS Code"/><published>2025-05-05T15:09:00+00:00</published><updated>2025-05-05T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/"><![CDATA[<p>I found it little difficult to run CPP project in vs code always, we need to do lot of configuration, setting to debug the code. In this post, you can find boilerplate to run cpp code in vs code.</p> <p><strong>Prerequisite</strong></p> <ul> <li>Make sure that CPP compiler already installed in your machine, I will use gcc but you can use any other compiler of your choice</li> <li>VS Code should be installed in your machine.</li> <li>(optional) Install plugin “C/C++ Extension Pack” , this will install C/C++ extension and CMAKE (We don’t need CMAKE for now, I will write seperate tutorial to build project using CMAKE)</li> </ul> <h4 id="create-new-folder-for-your-cpp-project">Create new folder for your CPP Project</h4> <p>I am going to follow below folder structure for my project and will follow same in rest of tutorial to write configuration files</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Boilerplate
│   main.cpp             # CPP file contains main function
│
└───build                # Build file (Executable / Binary )
│   │   main.exe
└───include              # All header files in project
|    │   student.h
|    │   Employee.h
└───src                  # All source files in project
|   │   student.cpp
|   │   Employee.cpp
└───lib                  # Third party libraries
|   │   spdlog
|    └───include
│       │   spdlog
└───.vscode              # vscode default folder to save settings
|    │   c_cpp_properties.json 
|    │   launch.json           
|    │   tasks.json            
|    │   settings.json         
</code></pre></div></div> <h3 id="lets-see-use-of-each-json-file-stored-in-vscode-folder-mentioned-above">Let’s see use of each JSON file stored in .vscode folder mentioned above</h3> <h4 id="c_cpp_propertiesjson---intellisense-and-compiler-configuration">c_cpp_properties.json - IntelliSense and Compiler Configuration</h4> <p>This is configuration file in vs code for intellisense, code suggestions and syntax highlighting for c/ c++ code. It defines include paths, compiler settings, and standard versions.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Win32"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/**"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/include"</span><span class="p">,</span><span class="w">         </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">header</span><span class="w"> </span><span class="err">directory</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/libs/**"</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">directory</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"defines"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"compilerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"cppStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c++20"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"intelliSenseMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"windows-gcc-x64"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h4 id="tasksjson---build-automation">tasks.json - Build Automation</h4> <p>This file defines how VS Code build and compiler your code and helps to automate compilation project. We can use Ctrl + Shift + B to build cpp code. This file contains path of header files, source files, third party libraries (if any) &amp; output file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">  </span><span class="err">//add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"-fdiagnostics-color=always"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"-g"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"main.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//by</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">run</span><span class="w"> </span><span class="err">main</span><span class="w"> </span><span class="err">file</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/src/*.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//additional</span><span class="w"> </span><span class="err">files</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">directory</span><span class="w"> </span><span class="err">flag</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/libs/spdlog/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w">
                </span><span class="s2">"-o"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"problemMatcher"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"$gcc"</span><span class="p">],</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Building main.exe in workspace root"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>IMPORTANT:</p> <p>if you create <code class="language-plaintext highlighter-rouge">tasks.json</code> using vs code function, then it will have default type as <code class="language-plaintext highlighter-rouge">cppbuild</code>, in this case you need to add path of all source files one by one.</p> <p>To make it more generic, we have added path of source file as <code class="language-plaintext highlighter-rouge">"${workspaceFolder}/src/*.cpp"</code> this does not work with <code class="language-plaintext highlighter-rouge">cppbuild</code> so changed the type to <code class="language-plaintext highlighter-rouge">shell</code></p> <p>Now, whenever we add new source file to project, we dont need to modify <code class="language-plaintext highlighter-rouge">tasks.json</code> file.</p> </blockquote> <blockquote> <p>NOTE:</p> <p>In args, we have passed <code class="language-plaintext highlighter-rouge">-g</code>, <code class="language-plaintext highlighter-rouge">main.cpp</code> to debug file. if you don’t want to pass <code class="language-plaintext highlighter-rouge">main.cpp</code> , then we can also mention <code class="language-plaintext highlighter-rouge">"$(file)"</code> to debug current file.</p> </blockquote> <h4 id="launchjson---debugger-setup">launch.json - Debugger Setup</h4> <p>This file conatins configuration for debugging environment, this defines executable, debugger and how to launch a program. Without this file, vs code will not know how to debug program.</p> <p>Once we add this file, we can see debug option in dropdown in vs code with name <code class="language-plaintext highlighter-rouge">C++ Debug</code> (you can give any name) in below configuation</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/debug_cpp.png" alt="debug cpp"/></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C++ Debug"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"miDebuggerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">gdb.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>We have added <code class="language-plaintext highlighter-rouge">"preLaunchTask": "Build Main"</code>, this name should be exactly same as which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code></p> <p><code class="language-plaintext highlighter-rouge">launch.json</code> will make sure that configuration which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code> has been loaded completely.</p> </blockquote> <h4 id="settingsjson---workspace-and-editor-settings">settings.json - Workspace and Editor settings</h4> <p>This file defines workspace specific settings including formatting, linting and compiler warnings</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"files.associations"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"iostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"ostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="w">
    </span><span class="p">},</span><span class="w">
   </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>This file also can be used to customize editor behaviours i.e. tabs, spaces, auto-save etc.</p> </blockquote> <p>That’s all, now let’s write some simple code.</p> <blockquote> <p><strong>main.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"school.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">school</span><span class="o">::</span><span class="n">student</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">s</span><span class="p">.</span><span class="n">display</span><span class="p">();</span> <span class="c1">// Call the display function from the student class</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>As mentioned above, all our header files will be inside “include” folder. so create one for <code class="language-plaintext highlighter-rouge">school.h</code></p> <blockquote> <p><strong>school.h</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">school</span><span class="p">{</span>
    <span class="k">class</span> <span class="nc">student</span><span class="p">{</span>
        <span class="nl">public:</span>
            <span class="kt">void</span> <span class="n">display</span><span class="p">();</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>then create it’s source file inside “src” folder, create one source file called <code class="language-plaintext highlighter-rouge">school.cpp</code></p> <blockquote> <p><strong>school.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">"../include/school.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">namespace</span> <span class="n">school</span>
<span class="p">{</span>
    <span class="kt">void</span> <span class="n">student</span><span class="o">::</span><span class="n">display</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello from student class!"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Our folder structure will be something as below.</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp_boilerplate.png?raw=true" alt="folder structure"/></p> <p>Now, press F5 or go to Debug -&gt; select “Debug C++” from dropdown and click on debug icon. Project will compile and generate executable in <code class="language-plaintext highlighter-rouge">build</code> folder. <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp-boilerplate-output.png?raw=true" alt="cpp output"/></p> <p>Great! we can now debug and run program in vs code. What next ? if you want to create another program , just copy this project folder and replace your files to run &amp; debug your program.</p> <p>Happy Coding !</p>]]></content><author><name></name></author><category term="cpp"/><category term="code,"/><category term="debug,"/><category term="cpp"/><summary type="html"><![CDATA[Boilerplate project to debug and run C++ code in VS Code]]></summary></entry></feed>