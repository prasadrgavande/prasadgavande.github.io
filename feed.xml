<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://prasadgavande.in/feed.xml" rel="self" type="application/atom+xml"/><link href="https://prasadgavande.in/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-07T23:36:15+00:00</updated><id>https://prasadgavande.in/feed.xml</id><title type="html">blank</title><subtitle>Personal website | Technical blog</subtitle><entry><title type="html">Trying to understand Pointers in c++</title><link href="https://prasadgavande.in/blog/2025/trying_to_understand_pointers_cpp/" rel="alternate" type="text/html" title="Trying to understand Pointers in c++"/><published>2025-10-07T15:09:00+00:00</published><updated>2025-10-07T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/trying_to_understand_pointers_cpp</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/trying_to_understand_pointers_cpp/"><![CDATA[<p>In this blog post, we are trying to understand pointers. Many people find this topic very confusing but actually, it is not that much complex or confusing.</p>]]></content><author><name></name></author><category term="cpp"/><category term="code,"/><category term="debug,"/><category term="cpp"/><summary type="html"><![CDATA[Trying to understand Pointers, how it works, what operations we can perform etc.]]></summary></entry><entry><title type="html">File Operations with shell script</title><link href="https://prasadgavande.in/blog/2025/file-operations-with-shell-script/" rel="alternate" type="text/html" title="File Operations with shell script"/><published>2025-06-15T15:09:00+00:00</published><updated>2025-06-15T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/file-operations-with-shell-script</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/file-operations-with-shell-script/"><![CDATA[<p>In this tutorial we will try to perform basic file operations like create, write, read, delete file using shell script. Let’s get started with this.</p> <p>As usual lets create new file using editor of your choice, I am using <code class="language-plaintext highlighter-rouge">vi</code> editor.</p> <p><code class="language-plaintext highlighter-rouge">vi fileOps.sh</code></p> <p>This will create new file and open editor for you. We will create all function for common operations of file and then we will call them using switch cases, so that user can perform whatever operations he want!</p> <p>Script will as user to enter file name first in which he want to perform operations</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash

# prompt user to enter file name

read -p "Enter file name: " fileName
</code></pre></div></div> <p>Lets create functions first.</p> <p>create function which will help us to create file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createFile() {
        touch "$fileName"
        echo "file created with name: $fileName"
}
</code></pre></div></div> <p>Create function to read file</p> <blockquote> <p>It’s good habit to check if file is exists before perform operaitons, so lets check if file exists or not, then perform read operation otherwise let user know that file does not exist</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readFile(){
        if [ -f "$fileName" ]; then
                echo "content in file as below"
                cat $fileName
        else
                echo "file does not exists"
        fi
}
</code></pre></div></div> <p>Create function to write file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>writeFile(){
        echo "Enter content you want to write to file"
        read content
        echo "$content" &gt;&gt; "$fileName" ## append content mode
        echo "Content has been written to file"
}
</code></pre></div></div> <blockquote> <p>here we are using append mode to write content in file, because we dont wan to loose old data. if you dont want to use append mode then simply modify arraw operator as below <code class="language-plaintext highlighter-rouge">echo "$content" &gt; "$fileName"</code></p> </blockquote> <p>Create function to delete file As mentioned above, first check if file exists or not before you delete the file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deleteFile(){
        if [ -f "$fileName" ]; then
                rm $fileName
                echo "file has been deleted"
        else
                echo "File does not exists"
        fi
}
</code></pre></div></div> <p>Now, all our required functions are created, lets write function calling Here we are going to as user which operations he want to perform using switch-case conditions</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "Choice Operation you want to perform on file"
echo "1. Create File"
echo "2. Read file"
echo "3. Write file"
echo "4. Delete file"
read -p "Enter Choice" choice
case $choice in
        1) createFile ;;
        2) readFile ;;
        3) writeFile ;;
        4) deleteFile;;
        *) echo "Invalid choice"
esac
</code></pre></div></div> <p>That’s it, we are ready to execute this script save the file, give required permissions to file</p> <p><code class="language-plaintext highlighter-rouge">chmod 777 fileOps.sh</code></p> <p>Now, run this executable using below command</p> <p><code class="language-plaintext highlighter-rouge">./fileOps.sh</code> Once we run below command, it will run executable, let’s create new file with name <code class="language-plaintext highlighter-rouge">sample.txt</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enter file name: sample.txt
Choice Operation you want to perform on file
1. Create File
2. Read file
3. Write file
4. Delete file
Enter Choice 1
file created with name: sample.txt
</code></pre></div></div> <p>check if file get created or not</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ls -ltr
total 12
-rwxrwxrwx 1 root root 916 Jun 15 23:15 fileOps.sh
-rw-r--r-- 1 root root   0 Jun 15 23:19 sample.txt
root@Prabhu:~/shell#

</code></pre></div></div> <p>Run again to perform write operations</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ./fileOps.sh
Enter file name: sample.txt
Choice Operation you want to perform on file
1. Create File
2. Read file
3. Write file
4. Delete file
Enter Choice3
Enter content you want to write to file
this is sample content added in file
Content has been written to file
root@Prabhu:~/shell#
</code></pre></div></div> <p>Run again to perform read operations</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ./fileOps.sh
Enter file name: sample.txt
Choice Operation you want to perform on file
1. Create File
2. Read file
3. Write file
4. Delete file
Enter Choice2
content in file as below
this is sample content added in file
root@Prabhu:~/shell#
</code></pre></div></div> <p>Run again to perform delete operations</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ./fileOps.sh
Enter file name: sample.txt
Choice Operation you want to perform on file
1. Create File
2. Read file
3. Write file
4. Delete file
Enter Choice4
file has been deleted
</code></pre></div></div> <p>check if file get deleted or not</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ls -ltr
total 11
-rwxrwxrwx 1 root root 916 Jun 15 23:15 fileOps.sh
root@Prabhu:~/shell#
</code></pre></div></div>]]></content><author><name></name></author><category term="scripting"/><category term="code,"/><category term="shell"/><summary type="html"><![CDATA[Tutorial for basics file operations using Shell scripting]]></summary></entry><entry><title type="html">Csv file handling with shell script</title><link href="https://prasadgavande.in/blog/2025/Csv-file-handling-with-shell-script/" rel="alternate" type="text/html" title="Csv file handling with shell script"/><published>2025-06-14T15:09:00+00:00</published><updated>2025-06-14T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/Csv-file-handling-with-shell-script</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/Csv-file-handling-with-shell-script/"><![CDATA[<p>In this post, we are going to take a look on basic csv operations which includes read, write, find etc.</p> <p>so let’s get started with this.</p> <p>Make sure, you have csv file with you in folder, you can refer to <a href="https://prasadgavande.in/blog/2025/file-operations-with-shell-script/">file handing post</a> to learn more about it.</p> <p>Create a file using editor of your choice, I am using <code class="language-plaintext highlighter-rouge">vi</code> editor for this</p> <p><code class="language-plaintext highlighter-rouge">vi csvOperations.sh</code></p> <p>This will create a file and open editor</p> <p>###Common declaration first declare shebang as below</p> <p><code class="language-plaintext highlighter-rouge">#!/bin/bash</code></p> <p>then create variable which will hold csv file name</p> <p><code class="language-plaintext highlighter-rouge">csvFile="data.csv"</code></p> <p>Let’s create a functions for basic operations</p> <h3 id="function-to-read-csv-file">Function to read CSV file</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readCsv()
{
        echo "Content in csv file as below"
        cat $csvFile
}
</code></pre></div></div> <h3 id="function-count-rows-in-file">function count rows in file</h3> <p>We are going to use tail function with <code class="language-plaintext highlighter-rouge">wc | -l</code> options which can give us count of rows in file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>countRows()
{
        echo "Number of rows in file: "
        tail data.csv | wc -l
}
</code></pre></div></div> <h3 id="extract-specific-column-values">Extract specific column values</h3> <p>We can use <code class="language-plaintext highlighter-rouge">awk</code> function to get column values</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extractColumns(){
        echo "extracting second column"
        awk -F , '{print $2}' "$csvFile"
}
</code></pre></div></div> <p>where:</p> <p><code class="language-plaintext highlighter-rouge">-F ,</code> –&gt; this will use as field seperator to comma , meaning awk will treat each comma-seperated value as different column</p> <p><code class="language-plaintext highlighter-rouge">{print $2}</code> –&gt; this will tell awk command to print second column</p> <p><code class="language-plaintext highlighter-rouge">$csvFile</code> –&gt; we are passing csv file to awk command for processing</p> <h3 id="append-data-to-csv-file">Append data to csv file</h3> <p>We are going to ask user to enter value to append data to csv</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>appendData()
{
        echo "Enter below information to add new row to csv"
        read -p "Enter Id:" id
        read -p "Enter Name:" name
        read -p "Enter Dept:" dept

        echo "$id, $name, $dept" &gt;&gt; "$csvFile"
        echo " data added to csv file"
}
</code></pre></div></div> <h3 id="get-row-by-id">Get row by Id</h3> <p>We are going to ask user to enter row id which he wants to search for , We can get row by passing Id using <code class="language-plaintext highlighter-rouge">awk</code> command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>getRowById()
{
        read -p "Enter Id of row you want to read" rowId
        awk -F , -v id="$rowId" '$1==id' "$csvFile"
}
</code></pre></div></div> <p>Where:</p> <p><code class="language-plaintext highlighter-rouge">-F ,</code> –&gt; this will use as field seperator to comma , meaning awk will treat each comma-seperated value as different column</p> <p><code class="language-plaintext highlighter-rouge">-v id="$rowId"</code> –&gt; this will define variable id inside awk command and assign value of rowId which passed by user</p> <p><code class="language-plaintext highlighter-rouge">'$1==id'</code> –&gt; as we have stored Ids in first column in csv file, this will check if first column matched id from csv file</p> <h3 id="function-calling">Function calling</h3> <p>Now, its time to call functions one by one.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readCsv
countRows
extractColumns
appendData
echo "Read Csv again after adding new row"
readCsv
getRowById
</code></pre></div></div> <p>That’s it, lets save this file , grant required permission. Before run this, lets take a look on our <code class="language-plaintext highlighter-rouge">data.csv</code> file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>id,name,dept
1,abc,IT
2,pqr,HR
3,xyz,Acc
</code></pre></div></div> <p>Now, run our executable csv opeations file <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/4-Csv-file-handling-with-shell-script/output.png?raw=true" alt="Output"/></p>]]></content><author><name></name></author><category term="scripting"/><category term="code,"/><category term="shell"/><summary type="html"><![CDATA[Tutorial for basics csv operations using Shell scripting]]></summary></entry><entry><title type="html">Useful linux commands</title><link href="https://prasadgavande.in/blog/2025/Useful-linux-commands/" rel="alternate" type="text/html" title="Useful linux commands"/><published>2025-06-11T15:09:00+00:00</published><updated>2025-06-11T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/Useful-linux-commands</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/Useful-linux-commands/"><![CDATA[<p>In this post, we are going to take a look on some essential and useful linux / unix commands that are being used for day to day operations</p> <h2 id="commands-for-directory-operations">Commands for directory operations</h2> <h3 id="ls">ls</h3> <p>This command is use to list content in folder</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls [options] [directory or path]
</code></pre></div></div> <p>example , if I am inside /etc/ folder, and if I execute command then I can see all folders inside /etc/ folder as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls
PackageKit              cron.daily      fstab       kernel          mime.types           polkit-1      selinux            sysctl.d
X11                     cron.hourly     fuse.conf   landscape       mke2fs.conf          profile       sensors.d          systemd
adduser.conf            cron.monthly    gai.conf    ld.so.cache     modprobe.d           profile.d     sensors3.conf      terminfo
alternatives            cron.weekly     glvnd       ld.so.conf      modules              protocols     services           timezone
apparmor                cron.yearly     gnutls      ld.so.conf.d    modules-load.d       python3       sgml               tmpfiles.d
apparmor.d              crontab         gprofng.rc  ldap            mtab                 python3.12    shadow             ubuntu-advantage
</code></pre></div></div> <h4 id="option---la">option : -la</h4> <p>ls command have many options, some useful options are as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -la
</code></pre></div></div> <p>where<br/> -l : use a long listing format -a, –all: do not ignore entries starting with .</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -la
total 808
drwxr-xr-x 88 root  root       4096 Jun 11 22:51 .
drwxr-xr-x 22 root  root       4096 Jun 11 22:46 ..
-rw-------  1 root  root          0 Sep 27  2024 .pwd.lock
-rw-r--r--  1 root  root        837 Sep 27  2024 .resolv.conf.systemd-resolved.bak
-rw-r--r--  1 root  root        208 Sep 27  2024 .updated
drwxr-xr-x  2 root  root       4096 Sep 27  2024 PackageKit
drwxr-xr-x  7 root  root       4096 Sep 27  2024 X11
-rw-r--r--  1 root  root       3444 Jul  5  2023 adduser.conf
drwxr-xr-x  2 root  root       4096 Sep 27  2024 alternatives

</code></pre></div></div> <h4 id="option---lt">option : -lt</h4> <p>if you want to sort the list content by time then use -lt option</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -lt
</code></pre></div></div> <p>where -t: sort by time, newest first; see –time</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -lt
total 792
-rw-r--r-- 1 root  root      17607 Jun 11 22:51 ld.so.cache
drwxr-xr-x 4 root  root       4096 Jun 11 22:51 ssl
drwxr-xr-x 2 root  root       4096 Jun 11 22:51 gnutls
drwxr-xr-x 2 root  root       4096 Jun 11 22:50 init.d
</code></pre></div></div> <h4 id="option--ltr">option: -ltr</h4> <p>if you want to sort the list content by time in reverse order then use -ltr option</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -ltr
</code></pre></div></div> <p>where</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -ltr
total 792
-rw-r--r-- 1 root  root         45 Jan 24  2020 bash_completion
-rw-r--r-- 1 root  root      12813 Mar 27  2021 services
-rw-r--r-- 1 root  root         34 Aug  2  2022 ld.so.conf
-rw-r--r-- 1 root  root        367 Aug  2  2022 bindresvport.blacklist
-rw-r--r-- 1 root  root        552 Oct 13  2022 pam.conf
-rw-r--r-- 1 root  root       3144 Oct 17  2022 protocols
</code></pre></div></div> <p>where: -r, –reverse: reverse order while sorting</p> <p>There are many other options, but I use above options in my day to day life</p> <h3 id="pwd">pwd</h3> <p>This command is used to print full path of current directory</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwd [options]
</code></pre></div></div> <p>Example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# pwd
/etc
</code></pre></div></div> <p>It has several options as below -L, –logical: use PWD from environment, even if it contains symlinks -P, –physical: avoid all symlinks</p> <h3 id="cd">cd</h3> <p>This command is used for navigation</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd [directory path where you want to go]
</code></pre></div></div> <p>example, if I am inside /etc/ folder and I want to go to pm folder inside same directory then I will use following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# pwd
/etc
root@Prabhu:/etc# cd pm
root@Prabhu:/etc/pm#
</code></pre></div></div> <p>if you want to go to some other folder of specific path then we can pass full directory path as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc/pm# pwd
/etc/pm
root@Prabhu:/etc/pm# cd /var/run/log
root@Prabhu:/var/run/log#
</code></pre></div></div> <p>cd command also provides some shortcuts as below</p> <p><code class="language-plaintext highlighter-rouge">cd</code> : returns to current user’s home directory</p> <p><code class="language-plaintext highlighter-rouge">cd ..</code> : go to one level up</p> <p><code class="language-plaintext highlighter-rouge">cd -</code> : go to previous directory</p> <h3 id="mkdir">mkdir</h3> <p>This command is used to create new directory</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir dir_name
</code></pre></div></div> <p>Example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# mkdir testing
root@Prabhu:~/prasad# ls
testing
root@Prabhu:~/prasad#
</code></pre></div></div> <h3 id="rmdir">rmdir</h3> <p>This command is used to remove empty directory</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rmdir dir_name
</code></pre></div></div> <p>Example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# ls
testing
root@Prabhu:~/prasad# rmdir testing
root@Prabhu:~/prasad# ls
root@Prabhu:~/prasad#
</code></pre></div></div> <blockquote> <p>Note: this command can only delete empty folders, if you have any file / folder inside this folder then this command cannot be used.</p> </blockquote> <h2 id="commands-for-file-operations">Commands for file operations</h2> <h3 id="touch">touch</h3> <p>This command is used to create new empty file in folder or to update timestamp of existing file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch [option] file_name.extension
</code></pre></div></div> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# ls
root@Prabhu:~/prasad#
root@Prabhu:~/prasad# touch test.txt
root@Prabhu:~/prasad# ls
test.txt
root@Prabhu:~/prasad#
</code></pre></div></div> <h3 id="cp">cp</h3> <p>This command is used to copy files and folders from one location to another location</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp [options] source destination
</code></pre></div></div> <p>Example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# cp prasad/test.txt shell/
root@Prabhu:~# cd shell/
root@Prabhu:~/shell# ls -ltr
total 32
-rwxr-xr-x 1 root root  16 Jun 11 23:33 test.txt
root@Prabhu:~/shell#
</code></pre></div></div> <p>If you want to copy whole directory including its files and sub folders then need to use option -r along with this.</p> <p>Example: if I want to copy folder /etc/ssh along with its sub folders and files then execute commands as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~#
root@Prabhu:~# cp -r /etc/ssh/ prasad
root@Prabhu:~# cd prasad
root@Prabhu:~/prasad# ls -ltr
total 8
-rwxrwxrwx 1 root root   16 Jun 11 23:31 test.txt
drwxr-xr-x 3 root root 4096 Jun 11 23:38 ssh
root@Prabhu:~/prasad# cd ssh
root@Prabhu:~/prasad/ssh# ls -ltr
total 8
drwxr-xr-x 2 root root 4096 Jun 11 23:38 ssh_config.d
-rw-r--r-- 1 root root 1649 Jun 11 23:38 ssh_config
root@Prabhu:~/prasad/ssh#
</code></pre></div></div> <h3 id="mv">mv</h3> <p>This command is used to move the file or folder from one location to another or to rename the file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mv source destination
</code></pre></div></div> <p>Example if you want to move file from one folder to another</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# mv prasad/test.txt shell/test.txt
root@Prabhu:~# cd shell
root@Prabhu:~/shell# ls -ltr
total 12
-rwxrwxrwx 1 root root  16 Jun 11 23:31 test.txt
root@Prabhu:~/shell#
</code></pre></div></div> <p>if you want to rename the file, then keep destnation same but change filename while execute mv command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# mv test.txt test2.txt
root@Prabhu:~/shell# ls -ltr
total 12
-rwxrwxrwx 1 root root  16 Jun 11 23:31 test2.txt
</code></pre></div></div> <h3 id="cat">cat</h3> <p>This command is used to print the content of file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat [options] filename
</code></pre></div></div> <p>Example, if you want to see content in file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# cat file.txt
 this is prasad
root@Prabhu:~/shell#
</code></pre></div></div> <p>Example, if you want to read the content of one file and put it into another file as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# cat test2.txt &gt; file.txt
root@Prabhu:~/shell# less file.txt

 this is prasad
file.txt (END)
</code></pre></div></div> <h3 id="grep-global-regualar-expression-print">grep (Global regualar expression print)</h3> <p>This command is very helpful if you want to search specific word from files</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep [options] pattern [filename]
</code></pre></div></div> <p>Example: to search keyword in any specific file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# grep "prasad" file.txt
 this is prasad
</code></pre></div></div> <p>if you want to display line number in search result</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# grep -n "prasad" file.txt
1: this is prasad
root@Prabhu:~/shell#
</code></pre></div></div> <p>if you want to display count of number matches your pattern then use command sa below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# grep -c "prasad" file.txt
1
root@Prabhu:~/shell#
</code></pre></div></div> <p>if you want to check if any specific keyword exists in which all files in folder</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# grep -l "prasad" *
exit.sh
file.txt
returnCode.sh
test2.txt
</code></pre></div></div> <h3 id="find">find</h3> <p>This command is used to search for file and directories based on name, type, size, data etc</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find [path] -options [expression]
</code></pre></div></div> <p>where Path : where to start for sarch Expression: Criteria like filename, size etc Example, if you want to search if file with specific name in folder “shell”</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# find shell -name "file.txt"
shell/file.txt
root@Prabhu:~#
</code></pre></div></div> <p>if you want to search by type/ extension</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# find shell -name *.txt
shell/file.txt
shell/test2.txt
root@Prabhu:~#
</code></pre></div></div> <p>if you want to search all files with specific permissions</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# find shell -perm 777
shell/for.sh
shell/functions.sh
shell/if.sh
shell/returnCode.sh
shell/test2.txt
shell/exit.sh
root@Prabhu:~#
</code></pre></div></div> <p>use <code class="language-plaintext highlighter-rouge">grep</code> and <code class="language-plaintext highlighter-rouge">find</code> together to search for specific keyword in file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# find ./ -type f -name "*.txt" -exec grep "prasad" {} \;
 this is prasad
root@Prabhu:~#
</code></pre></div></div> <h3 id="awk">awk</h3> <p>This command is used for pattern scanning and processing</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>awk options 'pattern {action}' input_file &gt; output_file
</code></pre></div></div> <p>Example Print all lines in file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# awk '{print}' file.txt
 this is prasad
root@Prabhu:~/shell#
</code></pre></div></div> <p>print specific column</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# awk '{print $1,$4}' sample.txt

What Ipsum?

Lorem simply
Why use

It long

Where come

Contrary belief,

The of
Where get

There variations
root@Prabhu:~/prasad#
</code></pre></div></div> <h3 id="sed">sed</h3> <p>This command used to replace content in the file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sed 's/old_content/new_content/' file_name
</code></pre></div></div> <p>Example, let’s replace ‘prasad’ by ‘prabhu’ in file.txt</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# cat file.txt
 this is prasad
</code></pre></div></div> <p>as you see file contain <code class="language-plaintext highlighter-rouge">this is prasad</code></p> <p>now execute <code class="language-plaintext highlighter-rouge">sed</code> command to replace</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# sed 's/prasad/prabhu/' file.txt
 this is prabhu
root@Prabhu:~/shell#
</code></pre></div></div> <h3 id="less">less</h3> <p>This command is used to read / print few lines in files, then we can enter space to remaining content and so on</p> <p>Below is syntax</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less file_name
</code></pre></div></div> <blockquote> <p>1: enter q to exit fron reading mode 2: if you want to search anything, then enter / followed by keyword example <code class="language-plaintext highlighter-rouge">/prasad</code> then press enter 3: if you are in search mode, and you want to find next occurrence then press <code class="language-plaintext highlighter-rouge">n</code> 4: if you are in search mode, and you want to find previous occurrence then press shift + <code class="language-plaintext highlighter-rouge">n</code></p> </blockquote> <h3 id="head">head</h3> <p>This command is used to print first few lines in file Below is syntax</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head file_name
</code></pre></div></div> <h3 id="tail">tail</h3> <p>This command is used to print last few lines in file Below is syntax</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tail file_name
</code></pre></div></div> <h3 id="diff">diff</h3> <p>This command is used to check difference in two files in same folder or different folder</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff file1 file2
</code></pre></div></div> <p>example, if I want to find difference in file.txt and test2.txt in same folder</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# diff file.txt test2.txt
1c1
&lt;  this is prasad
---
&gt;  this is prabhu
root@Prabhu:~/shell#
</code></pre></div></div> <h2 id="access--user-operations">Access &amp; User operations</h2> <h3 id="sudo">sudo</h3> <p>This command enables non-root user who are part of sudo group to execute administrative operations Syntax is as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo [options] command
</code></pre></div></div> <p>if you want to act as sudo then execute following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo su
</code></pre></div></div> <p>if you want to modify any file which need admin previlages then use command as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano file.txt
</code></pre></div></div> <p>We can perform many such operations using sudo but you should be part of sudo group in order to use this command</p> <h3 id="whoami">whoami</h3> <p>Use this command to check current logged in user</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# whoami
root
root@Prabhu:~/prasad#
</code></pre></div></div> <h3 id="chmod">chmod</h3> <p>this command used to change file/ directory permissions Syntax</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod [options][permission][file / directory]
</code></pre></div></div> <p>Example if I want to modify permission for sample.txt, below is current permission befor change</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# ls -la
total 16
drwxr-xr-x 3 root root 4096 Jun 12 22:45 .
drwx------ 8 root root 4096 Jun 12 23:11 ..
-rw-r--r-- 1 root root 3094 Jun 12 22:37 sample.txt
root@Prabhu:~/prasad#
</code></pre></div></div> <p>now read-write permissions to all users for this file</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/prasad# ls -la
total 16
drwxr-xr-x 3 root root 4096 Jun 12 22:45 .
drwx------ 8 root root 4096 Jun 12 23:11 ..
-rwxrwxrwx 1 root root 3094 Jun 12 22:37 sample.txt
</code></pre></div></div> <h3 id="chown">chown</h3> <p>this command is used to change ownership of file / directory, below is its syntax</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chown [options] newowner:newgroup [filename]
</code></pre></div></div> <h2 id="disk-related-operations">disk related operations</h2> <h2 id="df">df</h2> <p>this command is used to check disk usage and used spaced in your machine example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# df
Filesystem      1K-blocks      Used  Available Use% Mounted on
none              5038196         0    5038196   0% /usr/lib/modules/6.6.87.1-microsoft-standard-WSL2
none              5038196         4    5038192   1% /mnt/wsl
drivers         123857916 121770020    2087896  99% /usr/lib/wsl/drivers
/dev/sdd       1055762868   1675256 1000384140   1% /
none              5038196        80    5038116   1% /mnt/wslg
none              5038196         0    5038196   0% /usr/lib/wsl/lib
rootfs            5033176      2664    5030512   1% /init
none              5038196       520    5037676   1% /run
none              5038196         0    5038196   0% /run/lock
none              5038196         0    5038196   0% /run/shm
none              5038196        76    5038120   1% /mnt/wslg/versions.txt
none              5038196        76    5038120   1% /mnt/wslg/doc
C:\             123857916 121770020    2087896  99% /mnt/c
D:\             976760828 350942804  625818024  36% /mnt/d
tmpfs             5038196        16    5038180   1% /run/user/0
root@Prabhu:~#
</code></pre></div></div> <h2 id="du">du</h2> <p>This command is used to check size of directory in KB Example</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~# cd shell/
root@Prabhu:~/shell# du
40      .
root@Prabhu:~/shell#
</code></pre></div></div> <h2 id="process-related-operations">Process related operations</h2> <h3 id="top">top</h3> <p>Command shows all running processes in system and their hardware consumption</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# top
top - 23:26:44 up  1:29,  2 users,  load average: 0.01, 0.02, 0.00
Tasks:  30 total,   1 running,  29 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :   9840.2 total,   9310.8 free,    493.3 used,    196.3 buff/cache
MiB Swap:   3072.0 total,   3072.0 free,      0.0 used.   9346.9 avail Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
      1 root      20   0   21740  12240   9296 S   0.0   0.1   0:00.94 systemd
      2 root      20   0    3060   1792   1792 S   0.0   0.0   0:00.02 init-systemd(Ub
      7 root      20   0    3076   1792   1792 S   0.0   0.0   0:00.00 init
     65 root      19  -1   50420  15752  14984 S   0.0   0.2   0:00.48 systemd-journal
    118 root      20   0   25004   6272   4992 S   0.0   0.1   0:00.15 systemd-udevd
    192 systemd+  20   0   21452  12800  10624 S   0.0   0.1   0:00.11 systemd-resolve
    193 systemd+  20   0   91020   7552   6784 S   0.0   0.1   0:00.18 systemd-timesyn
    205 root      20   0    4236   2560   2432 S   0.0   0.0   0:00.01 cron
</code></pre></div></div> <h3 id="ps">ps</h3> <p>this command shows summarized status of running processes in system</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ps
    PID TTY          TIME CMD
   1566 pts/2    00:00:00 sudo
   1567 pts/2    00:00:00 su
   1568 pts/2    00:00:00 bash
   1597 pts/2    00:00:00 ps
root@Prabhu:~/shell#
</code></pre></div></div> <h3 id="kill">kill</h3> <p>This command is used to kill any process, we need to pass process id to kill that perticular process</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kill PID
</code></pre></div></div> <h2 id="other-utility-commands">Other utility commands</h2> <h2 id="uname">uname</h2> <p>this command shows information about system</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# uname
Linux
</code></pre></div></div> <p>To display all setting, use -a</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# uname -a
Linux Prabhu 6.6.87.1-microsoft-standard-WSL2 #1 SMP PREEMPT_DYNAMIC Mon Apr 21 17:08:54 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux
root@Prabhu:~/shell#
</code></pre></div></div> <h3 id="hostname">hostname</h3> <p>Use this command to get hostname of your system</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# hostname
Prabhu
</code></pre></div></div> <h3 id="time">time</h3> <p>Use this command to check system date time settings</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# time
real    0m0.000s
user    0m0.000s
sys     0m0.000s
root@Prabhu:~/shell#
</code></pre></div></div> <h3 id="ip">ip</h3> <p>this command is used to get list and manage network related parameters</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip [options] command
</code></pre></div></div> <p>Example, To display ip address of current system</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:~/shell# ip address show
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet 10.255.255.254/32 brd 10.255.255.254 scope global lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:15:5d:48:7f:77 brd ff:ff:ff:ff:ff:ff
    inet 172.28.43.90/20 brd 172.28.47.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::215:5dff:fe48:7f77/64 scope link
       valid_lft forever preferred_lft forever
root@Prabhu:~/shell#
</code></pre></div></div>]]></content><author><name></name></author><category term="commands"/><category term="linux,"/><category term="unix,"/><category term="commands"/><summary type="html"><![CDATA[Some essential and useful linux commands for day to day operations]]></summary></entry><entry><title type="html">Trying to understand Shell Scripting</title><link href="https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting/" rel="alternate" type="text/html" title="Trying to understand Shell Scripting"/><published>2025-06-09T15:09:00+00:00</published><updated>2025-06-09T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting/"><![CDATA[<p>In this post, we are trying to understand about shell scripting. As per wikipedia, A shell script is a computer program designed to be run by a Unix shell, a command-line interpreter. A script is command line program that contains a series of commands. The commands contained in the script are executed by interpreter. In case of shell scripts, the shell acts as interpreter and executes the commands listed in the script one after another.</p> <p>Let’s create our first shell script</p> <p>Create a new file in your Unix / Linux operating system. I have ubuntu with me, so I will create new file using touch command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>firstScript.sh
</code></pre></div></div> <p>Then open file with your favorite editor, I am using VIM editor.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim firstScript.sh
</code></pre></div></div> <p>it will open file in edit mode, press “I” to go to insert mode</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="s2">"This is my first shell script"</span>
</code></pre></div></div> <p>Save the file, and go back to folder where you have saved this file before you try to execute the script, make sure that it is executable and have enough permission to run Enter following command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>755 firstScript.sh 
</code></pre></div></div> <p>Now, this is time to run our first shell script Enter file name directly</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.<span class="se">\f</span>irstScript.sh
</code></pre></div></div> <p>We have successfully run our first shell script</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/run-first-script.png" alt="First Run"/></p> <p>Let’s further discuss more about shell scripting</p> <h2 id="variables">Variables</h2> <p>You can use variables in shell script. Variables simply storage locations which have name. We can assign value to those variable for later use. Example, any operations, manipulation etc. Syntaxt to create variable is very simple</p> <p><code class="language-plaintext highlighter-rouge">Variable_name="some value"</code></p> <p>Once variable created, you can retrieve value inside variable using <code class="language-plaintext highlighter-rouge">${variable_name}</code></p> <p>let’s create shell script with variable and try to retrieve that value</p> <p>Create another shell script and write code as below</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">MY_VAR</span><span class="o">=</span><span class="s2">"Bash"</span>
<span class="nb">echo</span> <span class="s2">"This is </span><span class="k">${</span><span class="nv">MY_VAR</span><span class="k">}</span><span class="s2"> command, running in shell scirpt"</span>
</code></pre></div></div> <p>Grant permission as we have given in previous example</p> <p>then run this shell script</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/variable.png" alt="variable"/></p> <h2 id="conditional-statements">Conditional Statements</h2> <h3 id="if-statement">if statement</h3> <p>We can use if statement same as other programming languages in shell script. In shell scripts, we have to use if-then-fi, fi is to tell interpreter that, if condition block has been ended.</p> <p>below is syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>lets take an example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>10
<span class="nv">secondNumber</span><span class="o">=</span>10

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>save the file , grant permission and try to run this shell script you will see output as below</p> <p><code class="language-plaintext highlighter-rouge">both numbers are equal</code></p> <blockquote> <p>NOTE: Remember to add one space in between <code class="language-plaintext highlighter-rouge">if</code> and <code class="language-plaintext highlighter-rouge">[</code> otherwise you will get an error</p> </blockquote> <h3 id="if-else-statement">if-else statement</h3> <p>We can also add else statement along with if , below is its syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">else
  </span><span class="nb">command </span>3
  <span class="nb">command </span>4
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>let’s continue to expand our previous example but here we will change value of variable <code class="language-plaintext highlighter-rouge">firstNumber</code> and <code class="language-plaintext highlighter-rouge">secondNumber</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>50
<span class="nv">secondNumber</span><span class="o">=</span>100

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"both numbers are not equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Run this shell script and you will see results as below</p> <p><code class="language-plaintext highlighter-rouge">both numbers are not equal</code></p> <h3 id="if--else-if---else-statements">if- else if - else statements</h3> <p>Shell script also allow us for else-if with below syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition 1 <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">elif</span> <span class="o">[</span> condition 2 <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>3
  <span class="nb">command </span>4
  ...
<span class="k">else
  </span><span class="nb">command </span>5
  <span class="nb">command </span>6
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>lets further expand our previous example again</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>10
<span class="nv">secondNumber</span><span class="o">=</span>100

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">elif</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> 10 <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"first number is 10"</span>
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"both numbers are not equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Now, as <code class="language-plaintext highlighter-rouge">firstNumber</code> assigned to 10, it will go to <code class="language-plaintext highlighter-rouge">else-if</code> statement block and result will be</p> <p><code class="language-plaintext highlighter-rouge">first number is 10</code></p> <h2 id="loops">Loops</h2> <h3 id="for-loop">for loop</h3> <p>if you want to perform any action number of times then, we can make use of for loop. Below is syntax for “For” loop</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>variable_name <span class="k">in </span>item1 item2 ... itemN
<span class="k">do
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">done</span>
</code></pre></div></div> <p>lets take an example of this</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">for </span>color <span class="k">in </span>red green blue
<span class="k">do
        </span><span class="nb">echo</span> <span class="s2">"Selected color in this iteration is: </span><span class="k">${</span><span class="nv">color</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div> <p>like before, you need to grant permission and then execute this shell script. Result will be as below</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/for.png?raw=true" alt="for loop"/></p> <h2 id="comments">Comments</h2> <p>We can add comments in shell script using <code class="language-plaintext highlighter-rouge">#</code> symbol. Anthing after # symbol is consider as comments and this command will not get executed exmaple</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>color <span class="k">in </span>red green blue <span class="c"># define the colors here </span>
<span class="k">do
        </span><span class="nb">echo</span> <span class="s2">"Selected color in this iteration is: </span><span class="k">${</span><span class="nv">color</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div> <p>in above script at second line we have added comment as <code class="language-plaintext highlighter-rouge"># define the colors here </code> this is just comment, and this will not be executed</p> <h2 id="return-codes">Return codes</h2> <p>Return code can be used in script for error checking, if return code is 0 meaning command executed successfully, if it is non-zero value, that means there is some error We can use special variable <code class="language-plaintext highlighter-rouge">$?</code> to check return code if previously executed command.</p> <p>let’s take an example, if I try <code class="language-plaintext highlighter-rouge">ls</code> command for any such path which does not exist , then our script will return non-zero code.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">ls</span> /prasad/test
<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">/prasad/test</code> this directory does not exists in my machine, so when I run script, I will get output as below</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/returnCode1.png?raw=true" alt="ReturnCode"/></p> <p>As we can see it has return code as 2, as it is not zero, we can say there is some error in command execution.</p> <p>Let’s take another example, in this example we are going to create some file and try to see what it will return</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">touch </span>prasad.txt
<span class="nb">echo</span> <span class="s2">"text file has been created"</span>
<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span>
</code></pre></div></div> <p>Run this script <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/returnCode2.png?raw=true" alt="ReturnCode2"/></p> <p>as we can see it has returned code as <code class="language-plaintext highlighter-rouge">0</code> and created new file with name <code class="language-plaintext highlighter-rouge">prasad.txt</code></p> <h2 id="exit-command">Exit Command</h2> <p>We can defined our own exit codes in shell script, simply use <code class="language-plaintext highlighter-rouge">exit</code> command in script and follow it with number from 0 to 255. We can add exit command anywhere in script. Whenever, script reached to exit command it will stop running.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">cat </span>prasad.txt
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="s2">"0"</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Command success"</span>
        <span class="nb">exit </span>0
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Command failed"</span>
        <span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div> <p>In above example, we are using <code class="language-plaintext highlighter-rouge">cat</code> command to read content from file, if it is success then we are checking with return code. If code returned as 0 that means we have successfully executed previous command and then we are using exit command by setting exit status as 0 , similarly if it is failed to read file then we are exiting with code as 1.</p> <p>as file with name <code class="language-plaintext highlighter-rouge">prasad.txt</code> already present in directory, it will return output as</p> <p><code class="language-plaintext highlighter-rouge">Command success</code></p> <h2 id="functions">Functions</h2> <p>Functions is most importent topic in any programming language, this help to avoid code duplication ana make program well strucured, easy to read, easy to understand.</p> <p>Below is syntax to create function in shell script</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>Function_name<span class="o">()</span> <span class="o">{</span>
<span class="c"># do something</span>
<span class="o">}</span>
</code></pre></div></div> <p>We can also write functions without specifying function before it’s name as below</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function_name<span class="o">(){</span>
<span class="c">#do something</span>
<span class="o">}</span>
</code></pre></div></div> <p>and simply use function name in your script file to call function let’s take an example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span>1
        <span class="nv">n2</span><span class="o">=</span>2
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add  <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>this will return output as below</p> <p><code class="language-plaintext highlighter-rouge">Addition of two number is : 3</code></p> <blockquote> <p>NOTE: To perform arithmetic in Bash, you need to use either $(()) or the expr command.</p> </blockquote> <h2 id="positional-parameters">Positional Parameters</h2> <p>We can pass parameters to our shell script and to our functions and those can be accessible using <code class="language-plaintext highlighter-rouge">$</code> symbol example $1, $2 etc Let’s contunue to our above example of addition.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span><span class="nv">$1</span>
        <span class="nv">n2</span><span class="o">=</span><span class="nv">$2</span>
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add 10 20 <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>This will return output as below <code class="language-plaintext highlighter-rouge">Addition of two number is : 30</code></p> <p>We also can pass parameters to our shell script directly. lets modify our script and then pass parameters while running script</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span><span class="nv">$1</span>
        <span class="nv">n2</span><span class="o">=</span><span class="nv">$2</span>
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add <span class="nv">$1</span> <span class="nv">$2</span> <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>Now, we are going to pass parameters while running script, use below command to run script</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/function-parameter.png?raw=true" alt="Function parameter"/></p> <p>This is how we can pass parameter to script and to the function.</p>]]></content><author><name></name></author><category term="scripting"/><category term="code,"/><category term="shell"/><summary type="html"><![CDATA[Tutorial for basics of Shell scripting]]></summary></entry><entry><title type="html">Boilerplate project to debug and run C++ code in VS Code</title><link href="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/" rel="alternate" type="text/html" title="Boilerplate project to debug and run C++ code in VS Code"/><published>2025-05-05T15:09:00+00:00</published><updated>2025-05-05T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/"><![CDATA[<p>I found it little difficult to run CPP project in vs code always, we need to do lot of configuration, setting to debug the code. In this post, you can find boilerplate to run cpp code in vs code.</p> <p><strong>Prerequisite</strong></p> <ul> <li>Make sure that CPP compiler already installed in your machine, I will use gcc but you can use any other compiler of your choice</li> <li>VS Code should be installed in your machine.</li> <li>(optional) Install plugin “C/C++ Extension Pack” , this will install C/C++ extension and CMAKE (We don’t need CMAKE for now, I will write seperate tutorial to build project using CMAKE)</li> </ul> <h4 id="create-new-folder-for-your-cpp-project">Create new folder for your CPP Project</h4> <p>I am going to follow below folder structure for my project and will follow same in rest of tutorial to write configuration files</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Boilerplate
│   main.cpp             # CPP file contains main function
│
└───build                # Build file (Executable / Binary )
│   │   main.exe
└───include              # All header files in project
|    │   student.h
|    │   Employee.h
└───src                  # All source files in project
|   │   student.cpp
|   │   Employee.cpp
└───lib                  # Third party libraries
|   │   spdlog
|    └───include
│       │   spdlog
└───.vscode              # vscode default folder to save settings
|    │   c_cpp_properties.json 
|    │   launch.json           
|    │   tasks.json            
|    │   settings.json         
</code></pre></div></div> <h3 id="lets-see-use-of-each-json-file-stored-in-vscode-folder-mentioned-above">Let’s see use of each JSON file stored in .vscode folder mentioned above</h3> <h4 id="c_cpp_propertiesjson---intellisense-and-compiler-configuration">c_cpp_properties.json - IntelliSense and Compiler Configuration</h4> <p>This is configuration file in vs code for intellisense, code suggestions and syntax highlighting for c/ c++ code. It defines include paths, compiler settings, and standard versions.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Win32"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/**"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/include"</span><span class="p">,</span><span class="w">         </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">header</span><span class="w"> </span><span class="err">directory</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/libs/**"</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">directory</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"defines"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"compilerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"cppStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c++20"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"intelliSenseMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"windows-gcc-x64"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h4 id="tasksjson---build-automation">tasks.json - Build Automation</h4> <p>This file defines how VS Code build and compiler your code and helps to automate compilation project. We can use Ctrl + Shift + B to build cpp code. This file contains path of header files, source files, third party libraries (if any) &amp; output file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">  </span><span class="err">//add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"-fdiagnostics-color=always"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"-g"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"main.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//by</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">run</span><span class="w"> </span><span class="err">main</span><span class="w"> </span><span class="err">file</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/src/*.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//additional</span><span class="w"> </span><span class="err">files</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">directory</span><span class="w"> </span><span class="err">flag</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/libs/spdlog/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w">
                </span><span class="s2">"-o"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"problemMatcher"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"$gcc"</span><span class="p">],</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Building main.exe in workspace root"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>IMPORTANT:</p> <p>if you create <code class="language-plaintext highlighter-rouge">tasks.json</code> using vs code function, then it will have default type as <code class="language-plaintext highlighter-rouge">cppbuild</code>, in this case you need to add path of all source files one by one.</p> <p>To make it more generic, we have added path of source file as <code class="language-plaintext highlighter-rouge">"${workspaceFolder}/src/*.cpp"</code> this does not work with <code class="language-plaintext highlighter-rouge">cppbuild</code> so changed the type to <code class="language-plaintext highlighter-rouge">shell</code></p> <p>Now, whenever we add new source file to project, we dont need to modify <code class="language-plaintext highlighter-rouge">tasks.json</code> file.</p> </blockquote> <blockquote> <p>NOTE:</p> <p>In args, we have passed <code class="language-plaintext highlighter-rouge">-g</code>, <code class="language-plaintext highlighter-rouge">main.cpp</code> to debug file. if you don’t want to pass <code class="language-plaintext highlighter-rouge">main.cpp</code> , then we can also mention <code class="language-plaintext highlighter-rouge">"$(file)"</code> to debug current file.</p> </blockquote> <h4 id="launchjson---debugger-setup">launch.json - Debugger Setup</h4> <p>This file conatins configuration for debugging environment, this defines executable, debugger and how to launch a program. Without this file, vs code will not know how to debug program.</p> <p>Once we add this file, we can see debug option in dropdown in vs code with name <code class="language-plaintext highlighter-rouge">C++ Debug</code> (you can give any name) in below configuation</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/debug_cpp.png" alt="debug cpp"/></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C++ Debug"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"miDebuggerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">gdb.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>We have added <code class="language-plaintext highlighter-rouge">"preLaunchTask": "Build Main"</code>, this name should be exactly same as which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code></p> <p><code class="language-plaintext highlighter-rouge">launch.json</code> will make sure that configuration which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code> has been loaded completely.</p> </blockquote> <h4 id="settingsjson---workspace-and-editor-settings">settings.json - Workspace and Editor settings</h4> <p>This file defines workspace specific settings including formatting, linting and compiler warnings</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"files.associations"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"iostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"ostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="w">
    </span><span class="p">},</span><span class="w">
   </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>This file also can be used to customize editor behaviours i.e. tabs, spaces, auto-save etc.</p> </blockquote> <p>That’s all, now let’s write some simple code.</p> <blockquote> <p><strong>main.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"school.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">school</span><span class="o">::</span><span class="n">student</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">s</span><span class="p">.</span><span class="n">display</span><span class="p">();</span> <span class="c1">// Call the display function from the student class</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>As mentioned above, all our header files will be inside “include” folder. so create one for <code class="language-plaintext highlighter-rouge">school.h</code></p> <blockquote> <p><strong>school.h</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">school</span><span class="p">{</span>
    <span class="k">class</span> <span class="nc">student</span><span class="p">{</span>
        <span class="nl">public:</span>
            <span class="kt">void</span> <span class="n">display</span><span class="p">();</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>then create it’s source file inside “src” folder, create one source file called <code class="language-plaintext highlighter-rouge">school.cpp</code></p> <blockquote> <p><strong>school.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">"../include/school.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">namespace</span> <span class="n">school</span>
<span class="p">{</span>
    <span class="kt">void</span> <span class="n">student</span><span class="o">::</span><span class="n">display</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello from student class!"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Our folder structure will be something as below.</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp_boilerplate.png?raw=true" alt="folder structure"/></p> <p>Now, press F5 or go to Debug -&gt; select “Debug C++” from dropdown and click on debug icon. Project will compile and generate executable in <code class="language-plaintext highlighter-rouge">build</code> folder. <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp-boilerplate-output.png?raw=true" alt="cpp output"/></p> <p>Great! we can now debug and run program in vs code. What next ? if you want to create another program , just copy this project folder and replace your files to run &amp; debug your program.</p> <p>Happy Coding !</p>]]></content><author><name></name></author><category term="cpp"/><category term="code,"/><category term="debug,"/><category term="cpp"/><summary type="html"><![CDATA[Boilerplate project to debug and run C++ code in VS Code]]></summary></entry></feed>