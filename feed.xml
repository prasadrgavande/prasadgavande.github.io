<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://prasadgavande.in/feed.xml" rel="self" type="application/atom+xml"/><link href="https://prasadgavande.in/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-11T23:03:58+00:00</updated><id>https://prasadgavande.in/feed.xml</id><title type="html">blank</title><subtitle>Personal website | Technical blog</subtitle><entry><title type="html">Useful linux commands</title><link href="https://prasadgavande.in/blog/2025/Useful-linux-commands/" rel="alternate" type="text/html" title="Useful linux commands"/><published>2025-06-11T15:09:00+00:00</published><updated>2025-06-11T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/Useful-linux-commands</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/Useful-linux-commands/"><![CDATA[<p>In this post, we are going to take a look on some essential and useful linux / unix commands that are being used for day to day operations</p> <h2 id="ls-command">ls command</h2> <p>This command is use to list content in folder</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls [options] [directory or path]
</code></pre></div></div> <p>example , if I am inside /etc/ folder, and if I execute command then I can see all folders inside /etc/ folder as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls
PackageKit              cron.daily      fstab       kernel          mime.types           polkit-1      selinux            sysctl.d
X11                     cron.hourly     fuse.conf   landscape       mke2fs.conf          profile       sensors.d          systemd
adduser.conf            cron.monthly    gai.conf    ld.so.cache     modprobe.d           profile.d     sensors3.conf      terminfo
alternatives            cron.weekly     glvnd       ld.so.conf      modules              protocols     services           timezone
apparmor                cron.yearly     gnutls      ld.so.conf.d    modules-load.d       python3       sgml               tmpfiles.d
apparmor.d              crontab         gprofng.rc  ldap            mtab                 python3.12    shadow             ubuntu-advantage
</code></pre></div></div> <h3 id="option---la">option : -la</h3> <p>ls command have many options, some useful options are as below</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -la
</code></pre></div></div> <p>where<br/> -l : use a long listing format -a, –all: do not ignore entries starting with .</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -la
total 808
drwxr-xr-x 88 root  root       4096 Jun 11 22:51 .
drwxr-xr-x 22 root  root       4096 Jun 11 22:46 ..
-rw-------  1 root  root          0 Sep 27  2024 .pwd.lock
-rw-r--r--  1 root  root        837 Sep 27  2024 .resolv.conf.systemd-resolved.bak
-rw-r--r--  1 root  root        208 Sep 27  2024 .updated
drwxr-xr-x  2 root  root       4096 Sep 27  2024 PackageKit
drwxr-xr-x  7 root  root       4096 Sep 27  2024 X11
-rw-r--r--  1 root  root       3444 Jul  5  2023 adduser.conf
drwxr-xr-x  2 root  root       4096 Sep 27  2024 alternatives

</code></pre></div></div> <h3 id="option---lt">option : -lt</h3> <p>if you want to sort the list content by time then use -lt option</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -lt
</code></pre></div></div> <p>where -t: sort by time, newest first; see –time</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -lt
total 792
-rw-r--r-- 1 root  root      17607 Jun 11 22:51 ld.so.cache
drwxr-xr-x 4 root  root       4096 Jun 11 22:51 ssl
drwxr-xr-x 2 root  root       4096 Jun 11 22:51 gnutls
drwxr-xr-x 2 root  root       4096 Jun 11 22:50 init.d
</code></pre></div></div> <h3 id="option--ltr">option: -ltr</h3> <p>if you want to sort the list content by time in reverse order then use -ltr option</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -ltr
</code></pre></div></div> <p>where</p> <p>Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@Prabhu:/etc# ls -ltr
total 792
-rw-r--r-- 1 root  root         45 Jan 24  2020 bash_completion
-rw-r--r-- 1 root  root      12813 Mar 27  2021 services
-rw-r--r-- 1 root  root         34 Aug  2  2022 ld.so.conf
-rw-r--r-- 1 root  root        367 Aug  2  2022 bindresvport.blacklist
-rw-r--r-- 1 root  root        552 Oct 13  2022 pam.conf
-rw-r--r-- 1 root  root       3144 Oct 17  2022 protocols
</code></pre></div></div> <p>where: -r, –reverse: reverse order while sorting</p> <p>There are many other options, but I use above options in my day to day life</p>]]></content><author><name></name></author><category term="commands"/><category term="linux,"/><category term="unix,"/><category term="commands"/><summary type="html"><![CDATA[Some essential and useful linux commands for day to day operations]]></summary></entry><entry><title type="html">Trying to understand Shell Scripting</title><link href="https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting/" rel="alternate" type="text/html" title="Trying to understand Shell Scripting"/><published>2025-06-09T15:09:00+00:00</published><updated>2025-06-09T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/traying-to-understand-shell-scripting/"><![CDATA[<p>In this post, we are trying to understand about shell scripting. As per wikipedia, A shell script is a computer program designed to be run by a Unix shell, a command-line interpreter. A script is command line program that contains a series of commands. The commands contained in the script are executed by interpreter. In case of shell scripts, the shell acts as interpreter and executes the commands listed in the script one after another.</p> <p>Let’s create our first shell script</p> <p>Create a new file in your Unix / Linux operating system. I have ubuntu with me, so I will create new file using touch command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>firstScript.sh
</code></pre></div></div> <p>Then open file with your favorite editor, I am using VIM editor.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim firstScript.sh
</code></pre></div></div> <p>it will open file in edit mode, press “I” to go to insert mode</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="s2">"This is my first shell script"</span>
</code></pre></div></div> <p>Save the file, and go back to folder where you have saved this file before you try to execute the script, make sure that it is executable and have enough permission to run Enter following command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>755 firstScript.sh 
</code></pre></div></div> <p>Now, this is time to run our first shell script Enter file name directly</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.<span class="se">\f</span>irstScript.sh
</code></pre></div></div> <p>We have successfully run our first shell script</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/run-first-script.png" alt="First Run"/></p> <p>Let’s further discuss more about shell scripting</p> <h2 id="variables">Variables</h2> <p>You can use variables in shell script. Variables simply storage locations which have name. We can assign value to those variable for later use. Example, any operations, manipulation etc. Syntaxt to create variable is very simple</p> <p><code class="language-plaintext highlighter-rouge">Variable_name="some value"</code></p> <p>Once variable created, you can retrieve value inside variable using <code class="language-plaintext highlighter-rouge">${variable_name}</code></p> <p>let’s create shell script with variable and try to retrieve that value</p> <p>Create another shell script and write code as below</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">MY_VAR</span><span class="o">=</span><span class="s2">"Bash"</span>
<span class="nb">echo</span> <span class="s2">"This is </span><span class="k">${</span><span class="nv">MY_VAR</span><span class="k">}</span><span class="s2"> command, running in shell scirpt"</span>
</code></pre></div></div> <p>Grant permission as we have given in previous example</p> <p>then run this shell script</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/variable.png" alt="variable"/></p> <h2 id="conditional-statements">Conditional Statements</h2> <h3 id="if-statement">if statement</h3> <p>We can use if statement same as other programming languages in shell script. In shell scripts, we have to use if-then-fi, fi is to tell interpreter that, if condition block has been ended.</p> <p>below is syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>lets take an example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>10
<span class="nv">secondNumber</span><span class="o">=</span>10

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>save the file , grant permission and try to run this shell script you will see output as below</p> <p><code class="language-plaintext highlighter-rouge">both numbers are equal</code></p> <blockquote> <p>NOTE: Remember to add one space in between <code class="language-plaintext highlighter-rouge">if</code> and <code class="language-plaintext highlighter-rouge">[</code> otherwise you will get an error</p> </blockquote> <h3 id="if-else-statement">if-else statement</h3> <p>We can also add else statement along with if , below is its syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">else
  </span><span class="nb">command </span>3
  <span class="nb">command </span>4
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>let’s continue to expand our previous example but here we will change value of variable <code class="language-plaintext highlighter-rouge">firstNumber</code> and <code class="language-plaintext highlighter-rouge">secondNumber</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>50
<span class="nv">secondNumber</span><span class="o">=</span>100

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"both numbers are not equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Run this shell script and you will see results as below</p> <p><code class="language-plaintext highlighter-rouge">both numbers are not equal</code></p> <h3 id="if--else-if---else-statements">if- else if - else statements</h3> <p>Shell script also allow us for else-if with below syntax</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">[</span> condition 1 <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">elif</span> <span class="o">[</span> condition 2 <span class="o">]</span>
<span class="k">then
  </span><span class="nb">command </span>3
  <span class="nb">command </span>4
  ...
<span class="k">else
  </span><span class="nb">command </span>5
  <span class="nb">command </span>6
  ...
<span class="k">fi</span>
</code></pre></div></div> <p>lets further expand our previous example again</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">firstNumber</span><span class="o">=</span>10
<span class="nv">secondNumber</span><span class="o">=</span>100

<span class="k">if</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> <span class="nv">$secondNumber</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"both numbers are equal"</span>
<span class="k">elif</span> <span class="o">[</span> <span class="nv">$firstNumber</span> <span class="o">=</span> 10 <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"first number is 10"</span>
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"both numbers are not equal"</span>
<span class="k">fi</span>
</code></pre></div></div> <p>Now, as <code class="language-plaintext highlighter-rouge">firstNumber</code> assigned to 10, it will go to <code class="language-plaintext highlighter-rouge">else-if</code> statement block and result will be</p> <p><code class="language-plaintext highlighter-rouge">first number is 10</code></p> <h2 id="loops">Loops</h2> <h3 id="for-loop">for loop</h3> <p>if you want to perform any action number of times then, we can make use of for loop. Below is syntax for “For” loop</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>variable_name <span class="k">in </span>item1 item2 ... itemN
<span class="k">do
  </span><span class="nb">command </span>1
  <span class="nb">command </span>2
  ...
<span class="k">done</span>
</code></pre></div></div> <p>lets take an example of this</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">for </span>color <span class="k">in </span>red green blue
<span class="k">do
        </span><span class="nb">echo</span> <span class="s2">"Selected color in this iteration is: </span><span class="k">${</span><span class="nv">color</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div> <p>like before, you need to grant permission and then execute this shell script. Result will be as below</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/for.png?raw=true" alt="for loop"/></p> <h2 id="comments">Comments</h2> <p>We can add comments in shell script using <code class="language-plaintext highlighter-rouge">#</code> symbol. Anthing after # symbol is consider as comments and this command will not get executed exmaple</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>color <span class="k">in </span>red green blue <span class="c"># define the colors here </span>
<span class="k">do
        </span><span class="nb">echo</span> <span class="s2">"Selected color in this iteration is: </span><span class="k">${</span><span class="nv">color</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div> <p>in above script at second line we have added comment as <code class="language-plaintext highlighter-rouge"># define the colors here </code> this is just comment, and this will not be executed</p> <h2 id="return-codes">Return codes</h2> <p>Return code can be used in script for error checking, if return code is 0 meaning command executed successfully, if it is non-zero value, that means there is some error We can use special variable <code class="language-plaintext highlighter-rouge">$?</code> to check return code if previously executed command.</p> <p>let’s take an example, if I try <code class="language-plaintext highlighter-rouge">ls</code> command for any such path which does not exist , then our script will return non-zero code.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">ls</span> /prasad/test
<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">/prasad/test</code> this directory does not exists in my machine, so when I run script, I will get output as below</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/returnCode1.png?raw=true" alt="ReturnCode"/></p> <p>As we can see it has return code as 2, as it is not zero, we can say there is some error in command execution.</p> <p>Let’s take another example, in this example we are going to create some file and try to see what it will return</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">touch </span>prasad.txt
<span class="nb">echo</span> <span class="s2">"text file has been created"</span>
<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span>
</code></pre></div></div> <p>Run this script <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/returnCode2.png?raw=true" alt="ReturnCode2"/></p> <p>as we can see it has returned code as <code class="language-plaintext highlighter-rouge">0</code> and created new file with name <code class="language-plaintext highlighter-rouge">prasad.txt</code></p> <h2 id="exit-command">Exit Command</h2> <p>We can defined our own exit codes in shell script, simply use <code class="language-plaintext highlighter-rouge">exit</code> command in script and follow it with number from 0 to 255. We can add exit command anywhere in script. Whenever, script reached to exit command it will stop running.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">cat </span>prasad.txt
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="s2">"0"</span> <span class="o">]</span>
<span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Command success"</span>
        <span class="nb">exit </span>0
<span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"Command failed"</span>
        <span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div> <p>In above example, we are using <code class="language-plaintext highlighter-rouge">cat</code> command to read content from file, if it is success then we are checking with return code. If code returned as 0 that means we have successfully executed previous command and then we are using exit command by setting exit status as 0 , similarly if it is failed to read file then we are exiting with code as 1.</p> <p>as file with name <code class="language-plaintext highlighter-rouge">prasad.txt</code> already present in directory, it will return output as</p> <p><code class="language-plaintext highlighter-rouge">Command success</code></p> <h2 id="functions">Functions</h2> <p>Functions is most importent topic in any programming language, this help to avoid code duplication ana make program well strucured, easy to read, easy to understand.</p> <p>Below is syntax to create function in shell script</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>Function_name<span class="o">()</span> <span class="o">{</span>
<span class="c"># do something</span>
<span class="o">}</span>
</code></pre></div></div> <p>We can also write functions without specifying function before it’s name as below</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function_name<span class="o">(){</span>
<span class="c">#do something</span>
<span class="o">}</span>
</code></pre></div></div> <p>and simply use function name in your script file to call function let’s take an example</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span>1
        <span class="nv">n2</span><span class="o">=</span>2
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add  <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>this will return output as below</p> <p><code class="language-plaintext highlighter-rouge">Addition of two number is : 3</code></p> <blockquote> <p>NOTE: To perform arithmetic in Bash, you need to use either $(()) or the expr command.</p> </blockquote> <h2 id="positional-parameters">Positional Parameters</h2> <p>We can pass parameters to our shell script and to our functions and those can be accessible using <code class="language-plaintext highlighter-rouge">$</code> symbol example $1, $2 etc Let’s contunue to our above example of addition.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span><span class="nv">$1</span>
        <span class="nv">n2</span><span class="o">=</span><span class="nv">$2</span>
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add 10 20 <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>This will return output as below <code class="language-plaintext highlighter-rouge">Addition of two number is : 30</code></p> <p>We also can pass parameters to our shell script directly. lets modify our script and then pass parameters while running script</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>add<span class="o">(){</span>
        <span class="nv">n1</span><span class="o">=</span><span class="nv">$1</span>
        <span class="nv">n2</span><span class="o">=</span><span class="nv">$2</span>
        <span class="nv">addition</span><span class="o">=</span><span class="k">$((</span>n1+n2<span class="k">))</span> <span class="c"># add two numbers</span>
        <span class="nb">echo</span> <span class="s2">"Addition of two number is : </span><span class="k">${</span><span class="nv">addition</span><span class="k">}</span><span class="s2"> "</span>
<span class="o">}</span>

add <span class="nv">$1</span> <span class="nv">$2</span> <span class="c">#&lt;---function calling</span>
</code></pre></div></div> <p>Now, we are going to pass parameters while running script, use below command to run script</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/2.%20trying%20to%20understand%20shell%20scripts/function-parameter.png?raw=true" alt="Function parameter"/></p> <p>This is how we can pass parameter to script and to the function.</p>]]></content><author><name></name></author><category term="scripting"/><category term="code,"/><category term="shell"/><summary type="html"><![CDATA[Tutorial for basics of Shell scripting]]></summary></entry><entry><title type="html">Boilerplate project to debug and run C++ code in VS Code</title><link href="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/" rel="alternate" type="text/html" title="Boilerplate project to debug and run C++ code in VS Code"/><published>2025-05-05T15:09:00+00:00</published><updated>2025-05-05T15:09:00+00:00</updated><id>https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode</id><content type="html" xml:base="https://prasadgavande.in/blog/2025/boilerplate-for-cpp-program-vscode/"><![CDATA[<p>I found it little difficult to run CPP project in vs code always, we need to do lot of configuration, setting to debug the code. In this post, you can find boilerplate to run cpp code in vs code.</p> <p><strong>Prerequisite</strong></p> <ul> <li>Make sure that CPP compiler already installed in your machine, I will use gcc but you can use any other compiler of your choice</li> <li>VS Code should be installed in your machine.</li> <li>(optional) Install plugin “C/C++ Extension Pack” , this will install C/C++ extension and CMAKE (We don’t need CMAKE for now, I will write seperate tutorial to build project using CMAKE)</li> </ul> <h4 id="create-new-folder-for-your-cpp-project">Create new folder for your CPP Project</h4> <p>I am going to follow below folder structure for my project and will follow same in rest of tutorial to write configuration files</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Boilerplate
│   main.cpp             # CPP file contains main function
│
└───build                # Build file (Executable / Binary )
│   │   main.exe
└───include              # All header files in project
|    │   student.h
|    │   Employee.h
└───src                  # All source files in project
|   │   student.cpp
|   │   Employee.cpp
└───lib                  # Third party libraries
|   │   spdlog
|    └───include
│       │   spdlog
└───.vscode              # vscode default folder to save settings
|    │   c_cpp_properties.json 
|    │   launch.json           
|    │   tasks.json            
|    │   settings.json         
</code></pre></div></div> <h3 id="lets-see-use-of-each-json-file-stored-in-vscode-folder-mentioned-above">Let’s see use of each JSON file stored in .vscode folder mentioned above</h3> <h4 id="c_cpp_propertiesjson---intellisense-and-compiler-configuration">c_cpp_properties.json - IntelliSense and Compiler Configuration</h4> <p>This is configuration file in vs code for intellisense, code suggestions and syntax highlighting for c/ c++ code. It defines include paths, compiler settings, and standard versions.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Win32"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/**"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/include"</span><span class="p">,</span><span class="w">         </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">header</span><span class="w"> </span><span class="err">directory</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/libs/**"</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w"> </span><span class="err">directory</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"defines"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"compilerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"cppStandard"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c++20"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"intelliSenseMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"windows-gcc-x64"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h4 id="tasksjson---build-automation">tasks.json - Build Automation</h4> <p>This file defines how VS Code build and compiler your code and helps to automate compilation project. We can use Ctrl + Shift + B to build cpp code. This file contains path of header files, source files, third party libraries (if any) &amp; output file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">g++.exe"</span><span class="p">,</span><span class="w">  </span><span class="err">//add</span><span class="w"> </span><span class="err">path</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">your</span><span class="w"> </span><span class="err">compiler</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"-fdiagnostics-color=always"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"-g"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"main.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//by</span><span class="w"> </span><span class="err">default</span><span class="w"> </span><span class="err">run</span><span class="w"> </span><span class="err">main</span><span class="w"> </span><span class="err">file</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/src/*.cpp"</span><span class="p">,</span><span class="w">   </span><span class="err">//additional</span><span class="w"> </span><span class="err">files</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">directory</span><span class="w"> </span><span class="err">flag</span><span class="w">
                 </span><span class="s2">"-I${workspaceFolder}/libs/spdlog/include"</span><span class="p">,</span><span class="w">   </span><span class="err">//</span><span class="w"> </span><span class="err">Include</span><span class="w"> </span><span class="err">third</span><span class="w"> </span><span class="err">party</span><span class="w"> </span><span class="err">library</span><span class="w">
                </span><span class="s2">"-o"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"problemMatcher"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"$gcc"</span><span class="p">],</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"detail"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Building main.exe in workspace root"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>IMPORTANT:</p> <p>if you create <code class="language-plaintext highlighter-rouge">tasks.json</code> using vs code function, then it will have default type as <code class="language-plaintext highlighter-rouge">cppbuild</code>, in this case you need to add path of all source files one by one.</p> <p>To make it more generic, we have added path of source file as <code class="language-plaintext highlighter-rouge">"${workspaceFolder}/src/*.cpp"</code> this does not work with <code class="language-plaintext highlighter-rouge">cppbuild</code> so changed the type to <code class="language-plaintext highlighter-rouge">shell</code></p> <p>Now, whenever we add new source file to project, we dont need to modify <code class="language-plaintext highlighter-rouge">tasks.json</code> file.</p> </blockquote> <blockquote> <p>NOTE:</p> <p>In args, we have passed <code class="language-plaintext highlighter-rouge">-g</code>, <code class="language-plaintext highlighter-rouge">main.cpp</code> to debug file. if you don’t want to pass <code class="language-plaintext highlighter-rouge">main.cpp</code> , then we can also mention <code class="language-plaintext highlighter-rouge">"$(file)"</code> to debug current file.</p> </blockquote> <h4 id="launchjson---debugger-setup">launch.json - Debugger Setup</h4> <p>This file conatins configuration for debugging environment, this defines executable, debugger and how to launch a program. Without this file, vs code will not know how to debug program.</p> <p>Once we add this file, we can see debug option in dropdown in vs code with name <code class="language-plaintext highlighter-rouge">C++ Debug</code> (you can give any name) in below configuation</p> <p><img src="https://raw.githubusercontent.com/prasadrgavande/prasadgavande.github.io/refs/heads/master/assets/img/debug_cpp.png" alt="debug cpp"/></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C++ Debug"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/build/main.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"stopAtEntry"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"environment"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
            </span><span class="nl">"externalConsole"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gdb"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"miDebuggerPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"D:</span><span class="se">\\</span><span class="s2">Installation</span><span class="se">\\</span><span class="s2">mingw</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">gdb.exe"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"preLaunchTask"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build Main"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"setupCommands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Enable pretty-printing for gdb"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-enable-pretty-printing"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"ignoreFailures"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>We have added <code class="language-plaintext highlighter-rouge">"preLaunchTask": "Build Main"</code>, this name should be exactly same as which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code></p> <p><code class="language-plaintext highlighter-rouge">launch.json</code> will make sure that configuration which we have defined in <code class="language-plaintext highlighter-rouge">tasks.json</code> has been loaded completely.</p> </blockquote> <h4 id="settingsjson---workspace-and-editor-settings">settings.json - Workspace and Editor settings</h4> <p>This file defines workspace specific settings including formatting, linting and compiler warnings</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"files.associations"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"iostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"ostream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cpp"</span><span class="w">
    </span><span class="p">},</span><span class="w">
   </span><span class="nl">"editor.formatOnSave"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <blockquote> <p>NOTE:</p> <p>This file also can be used to customize editor behaviours i.e. tabs, spaces, auto-save etc.</p> </blockquote> <p>That’s all, now let’s write some simple code.</p> <blockquote> <p><strong>main.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"school.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">school</span><span class="o">::</span><span class="n">student</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">s</span><span class="p">.</span><span class="n">display</span><span class="p">();</span> <span class="c1">// Call the display function from the student class</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>As mentioned above, all our header files will be inside “include” folder. so create one for <code class="language-plaintext highlighter-rouge">school.h</code></p> <blockquote> <p><strong>school.h</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">school</span><span class="p">{</span>
    <span class="k">class</span> <span class="nc">student</span><span class="p">{</span>
        <span class="nl">public:</span>
            <span class="kt">void</span> <span class="n">display</span><span class="p">();</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>then create it’s source file inside “src” folder, create one source file called <code class="language-plaintext highlighter-rouge">school.cpp</code></p> <blockquote> <p><strong>school.cpp</strong></p> </blockquote> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">"../include/school.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">namespace</span> <span class="n">school</span>
<span class="p">{</span>
    <span class="kt">void</span> <span class="n">student</span><span class="o">::</span><span class="n">display</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello from student class!"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Our folder structure will be something as below.</p> <p><img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp_boilerplate.png?raw=true" alt="folder structure"/></p> <p>Now, press F5 or go to Debug -&gt; select “Debug C++” from dropdown and click on debug icon. Project will compile and generate executable in <code class="language-plaintext highlighter-rouge">build</code> folder. <img src="https://github.com/prasadrgavande/prasadgavande.github.io/blob/master/assets/img/cpp-boilerplate-output.png?raw=true" alt="cpp output"/></p> <p>Great! we can now debug and run program in vs code. What next ? if you want to create another program , just copy this project folder and replace your files to run &amp; debug your program.</p> <p>Happy Coding !</p>]]></content><author><name></name></author><category term="cpp"/><category term="code,"/><category term="debug,"/><category term="cpp"/><summary type="html"><![CDATA[Boilerplate project to debug and run C++ code in VS Code]]></summary></entry></feed>